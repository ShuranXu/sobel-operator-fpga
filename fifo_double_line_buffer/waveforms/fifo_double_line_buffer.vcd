$date
	Tue Mar 11 22:17:41 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fifo_double_line_buffer_tb $end
$var wire 1 ! done_o $end
$var wire 8 " data2_o [7:0] $end
$var wire 8 # data1_o [7:0] $end
$var wire 8 $ data0_o [7:0] $end
$var reg 1 % clk $end
$var reg 8 & data_i [7:0] $end
$var reg 1 ' rst $end
$var reg 1 ( we_i $end
$var integer 32 ) i [31:0] $end
$scope module FIFO_DOUBLE_LINE_BUFFER $end
$var wire 1 % clk $end
$var wire 8 * data0_o [7:0] $end
$var wire 8 + data1_o [7:0] $end
$var wire 8 , data2_o [7:0] $end
$var wire 8 - data_i [7:0] $end
$var wire 1 ! done_o $end
$var wire 1 ' rst $end
$var wire 1 ( we_i $end
$var wire 1 . fifo2_done $end
$var wire 8 / fifo2_data [7:0] $end
$var wire 1 0 fifo1_done $end
$var wire 8 1 fifo1_data [7:0] $end
$scope module FIFO_SINGLE_LINE_BUFFER_01 $end
$var wire 1 % clk $end
$var wire 8 2 data_i [7:0] $end
$var wire 8 3 data_o [7:0] $end
$var wire 1 ' rst $end
$var wire 1 ( we_i $end
$var wire 1 0 done_o $end
$var parameter 32 4 DEPTH $end
$var reg 10 5 iCounter [9:0] $end
$var reg 10 6 rd_pointer [9:0] $end
$var reg 10 7 wr_pointer [9:0] $end
$upscope $end
$scope module FIFO_SINGLE_LINE_BUFFER_02 $end
$var wire 1 % clk $end
$var wire 8 8 data_i [7:0] $end
$var wire 8 9 data_o [7:0] $end
$var wire 1 ' rst $end
$var wire 1 0 we_i $end
$var wire 1 . done_o $end
$var parameter 32 : DEPTH $end
$var reg 10 ; iCounter [9:0] $end
$var reg 10 < rd_pointer [9:0] $end
$var reg 10 = wr_pointer [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 :
b101 4
$end
#0
$dumpvars
b0 =
b0 <
b0 ;
bx 9
bx 8
b0 7
b0 6
b0 5
bx 3
b0 2
bx 1
00
bx /
0.
b0 -
bx ,
bx +
b0 *
bx )
0(
1'
b0 &
1%
b0 $
bx #
bx "
0!
$end
#5
0%
#10
b1 7
b1 #
b1 +
b1 1
b1 3
b1 8
b1 5
1%
b1 $
b1 *
b1 &
b1 -
b1 2
b1 )
1(
0'
#15
0%
#20
b10 5
b10 7
1%
b10 $
b10 *
b10 &
b10 -
b10 2
b10 )
#25
0%
#30
b11 7
b11 5
1%
b11 $
b11 *
b11 &
b11 -
b11 2
b11 )
#35
0%
#40
b100 5
b100 7
1%
b100 $
b100 *
b100 &
b100 -
b100 2
b100 )
#45
0%
#50
1!
10
b0 7
b101 5
1%
b101 $
b101 *
b101 &
b101 -
b101 2
b101 )
#55
0%
#60
b1 7
b10 #
b10 +
b10 1
b10 3
b10 8
b1 6
b1 ;
b1 =
b1 "
b1 ,
b1 /
b1 9
1%
b110 $
b110 *
b110 &
b110 -
b110 2
b110 )
#65
0%
#70
b10 =
b10 ;
b10 6
b10 7
b11 #
b11 +
b11 1
b11 3
b11 8
1%
b111 $
b111 *
b111 &
b111 -
b111 2
b111 )
#75
0%
#80
b11 7
b100 #
b100 +
b100 1
b100 3
b100 8
b11 6
b11 ;
b11 =
1%
b1000 $
b1000 *
b1000 &
b1000 -
b1000 2
b1000 )
#85
0%
#90
b100 =
b100 ;
b100 6
b100 7
b101 #
b101 +
b101 1
b101 3
b101 8
1%
b1001 $
b1001 *
b1001 &
b1001 -
b1001 2
b1001 )
#95
0%
#100
1.
b0 7
b110 #
b110 +
b110 1
b110 3
b110 8
b0 6
b101 ;
b0 =
1%
b1010 $
b1010 *
b1010 &
b1010 -
b1010 2
b1010 )
#105
0%
#110
b1 <
b1 =
b10 "
b10 ,
b10 /
b10 9
b1 6
b1 7
b111 #
b111 +
b111 1
b111 3
b111 8
1%
b1011 $
b1011 *
b1011 &
b1011 -
b1011 2
b1011 )
#115
0%
#120
b10 7
b1000 #
b1000 +
b1000 1
b1000 3
b1000 8
b10 6
b10 =
b11 "
b11 ,
b11 /
b11 9
b10 <
1%
b1100 $
b1100 *
b1100 &
b1100 -
b1100 2
b1100 )
#125
0%
#130
b11 <
b11 =
b100 "
b100 ,
b100 /
b100 9
b11 6
b11 7
b1001 #
b1001 +
b1001 1
b1001 3
b1001 8
1%
b1101 $
b1101 *
b1101 &
b1101 -
b1101 2
b1101 )
#135
0%
#140
b100 7
b1010 #
b1010 +
b1010 1
b1010 3
b1010 8
b100 6
b100 =
b101 "
b101 ,
b101 /
b101 9
b100 <
1%
b1110 $
b1110 *
b1110 &
b1110 -
b1110 2
b1110 )
#145
0%
#150
b0 <
b0 =
b110 "
b110 ,
b110 /
b110 9
b1011 #
b1011 +
b1011 1
b1011 3
b1011 8
b0 6
1%
0(
b1111 )
#155
0%
#160
